{
  "prompt": "The Snyk Code Codesearch system. The components in the gray box comprise the system itself, with the inputs and outputs placed above and below respectively. Rectangles represent computations, while ellipses represent data. The ``Codesearch STL'' (STandard Library) node is on the border of the system, acting as an API to the underlying StarLang language.",
  "final_latex_code": "\\documentclass[border=5mm]{standalone}\n\\usepackage{tikz}\n\\usetikzlibrary{arrows.meta,\n                chains,\n                positioning,\n                shapes.geometric}\n\n\\begin{document}\n    \\begin{tikzpicture}[\nnode distance = 2mm and 9mm,\n     C/.style = {ellipse, draw, semithick, minimum height=10mm},\n     R/.style = {rectangle, draw, minimum width=28mm, minimum height=16mm,\n                 align=center, \n                 on chain=going below },\n   arr/.style = {-Stealth, very thick},\nevery label/.append style = {label distance=1ex, inner sep=1pt, font=\\small}\n                        ]\n% nodes\n\\node[C]         (user)        {User code};\n%\n\\node[R]   (parsers) [below=of user]      {Parsers};\n\\node[C]   (ast)  [below=of parsers]      {ASTs};\n\\node[R]   (ae)   [below=of ast]          {Analysis engine};\n\\node[C]   (graph) [below=of ae]          {Analysis graph};\n%\n\\node[C]   (usq)  [right=of user -| graph]   {User Codesearch query $\\star$};\n%\n\\node[R]   (translator) [below right=of usq] {Translator};\n\\node[C]   (partial) [right=of translator]  {Partial query};\n\\node[R]   (auto)   [below=of partial]      {Autocomplete engine $\\star$};\n\\node[C]   (query)  [right=of auto] {StarLang query $\\star$};\n\\node[R]   (slsol)  [below=of auto]  {StarLang solver};\n\\node[C]   (queryres) [below=35mm of slsol] {Query result};\n%\n\\node[R]   (cstl)  [above right=of query]  {CodeSearch STL $\\star$};\n%\n\\begin{scope}[every path/.style={arr}]\n%\\draw[arr]  (parsers) -- (ast);\n\\node at (graph.north east) [right] {$\\cdots$};\n\\draw[arr]  (ast) -- (ae);       \n\\draw[arr]  (ae) -- (graph);\n%\n\\draw[arr]  (usq) -| ([xshift=-3mm] translators.east);\n\\draw[arr]  (usq) |- (partial);\n\\draw[arr]  (translator) -- (partial);\n\\draw[arr]  (partial) -| (auto);\n\\draw[arr]  (auto) -| (query);\n\\draw[arr]  (query) -| (queryres);\n%\n\\draw[arr]  (usq) -| (cstl);\n\\draw[arr]  (cstl) -| (partial);\n\\draw[arr]  (cstl) -| (slsol);\n\\end{scope}\n% dashed lines\n\\draw[dashed, rounded corners]\n    (queryres.east) |- (query) |- (queryres);\n\\draw[dashed, rounded corners]\n    (queryres.east) |- (usq) |- (queryres);\n\\end{tikzpicture}\n\\end{document}",
  "compiled_successfully": true,
  "ground_truth": "\\documentclass[a4paper]{article}\n\\usepackage[T1]{fontenc}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{arrows,shapes.geometric,positioning,shadows,calc,backgrounds}\n\n\\begin{document}\n\n\\begin{tikzpicture}[\n  every node/.style={inner sep=1.5pt},\n  data/.style={ellipse, draw=black, fill=white, thick, minimum height=4mm, minimum height=6mm, align=center},\n  process/.style={rectangle, draw=black, fill=white, thick, minimum width=5mm, minimum height=6mm, align=center, inner sep=5pt},\n  shadows/.style={double copy shadow, shadow xshift=2pt, shadow yshift=-2pt},\n]\n  %nodes\n  \\node[data] (code) {User code};\n  \\node[data] (query) [right=of code,xshift=1.7cm] {User Codesearch\\\\query $\\star$};\n  \\node[process, shadows] (parsers) [below=of code,yshift=-0.5cm] {Parsers};\n  \\node[data, shadows] (asts) [below=of parsers] {ASTs};\n  \\node[process] (engine) [below=of asts] {Analysis\\\\engine};\n  \\node[data] (graph) [below=of engine,yshift=0.1mm] {Analysis\\\\graph};\n  \\node[process] (translator) [below=of query,yshift=-0.3cm] {Translator};\n  \\node[data] (stdlib) [right=of translator,yshift=10mm] {Codesearch\\\\STL $\\star$};\n  \\node[data] (partial-query) [below=of translator,yshift=0.3cm] {Partial\\\\query};\n  \\node[process] (autocomplete) [below=of partial-query,yshift=0.3cm] {Autocomplete\\\\engine $\\star$};\n  \\node[process] (solver) [below=of autocomplete] {StarLang\\\\solver};\n  \\node[data] (starlang-query) [right=of autocomplete,xshift=-5mm] {StarLang\\\\query $\\star$};\n  \\node[data] (suggestions) [left=of partial-query] {Suggestions};\n  \\node[data] (result) [below=of solver] {Query result};\n\n  %edges\n  \\draw[->] (code) -- (parsers);\n  \\draw[->] (parsers) -- (asts);\n  \\draw[->] (asts) -- (engine);\n  \\draw[->] (engine) -- (graph);\n  \\draw[->] (graph) -- (solver);\n  \\draw[->] (graph) -| +(2,1.97) -- (autocomplete.185);\n  \\draw[->] (partial-query) -- (autocomplete);\n  \\draw[->] (translator) -- (partial-query);\n  \\draw[->] (query) -- (translator);\n  \\draw[<-,dashed] (stdlib) |- (query);\n  \\draw[->] (translator) -| (starlang-query);\n  \\draw[->] (starlang-query) |- (solver);\n  \\draw[->] (stdlib) |- +(0.9,-3.5) -- +(0.9,-6.55) -- (solver);\n  \\draw[->] (stdlib) |- +(0.9,-3.5) -- +(-2.85,-3.5) -- (autocomplete.50);\n  \\draw[->] (solver) -- (result);\n  \\draw[->] (solver.115) -| (autocomplete.255);\n  \\draw[->] (autocomplete.285) -- (solver.75);\n  \\draw[->] (autocomplete.175) -| (suggestions);\n  \\draw[->] (suggestions) |- (query);\n\n  \\begin{scope}[on background layer]\n    \\draw[very thick,fill=black!10] ($(parsers.north west)+(-0.7,0.6)$) rectangle ($(solver.south east)+(3.7,-0.6)$);\n  \\end{scope}\n\\end{tikzpicture}\n\n\\end{document}",
  "attempts": 1
}