{
  "prompt": "State diagram of the ACADL ExecuteStage class, where \\texttt{fu} represents any of the contained FunctionalUnits, and \\texttt{ps} represents any of the connected PipelineStages.",
  "final_latex_code": "\\documentclass{article}\n\\usepackage{tikz}\n\\usetikzlibrary{automata,positioning}\n\n\\begin{document}\n\n\\begin{figure}[ht]\n    \\centering\n    \\begin{tikzpicture}[shorten >=1pt,node distance=3cm,on grid,auto]\n        \\node[state,initial] (q_0) {idle};\n        \\node[state] (q_1) [above left =of q_0] {buffer};\n        \\node[state] (q_2) [below left =of q_0] {process};\n        \\node[state] (q_3) [right =of q_0] {stall};\n\n        \\path[->]\n            (q_0) edge node {$r:\\mathrm{ready}()$} (q_1)\n                  edge node {$r:\\mathrm{ready}(),\\mathrm{fu\\_found}$} (q_3)\n            (q_1) edge[bend right] node {$r:\\mathrm{ready}(),\\mathrm{fu\\_found},\\mathrm{Ps\\_ready}:\\mathrm{True}$} (q_0)\n                  edge[bend right] node {$t:=t+1$} (q_3)\n            (q_2) edge[bend right] node {$fu\\_ready():\\\\\\mathrm{ready}:\\mathrm{True}$} (q_0)\n            (q_2) edge[bend right] node {$r:\\mathrm{ready}(),\\mathrm{fu\\_found},\\mathrm{Ps\\_ready}:\\mathrm{False}$} (q_3)\n            (q_3) edge[bend right] node {$t:=t+1$} (q_0)\n            (q_3) edge[bend right] node {$r:\\mathrm{ready}(),\\mathrm{fu\\_found},\\mathrm{Ps\\_ready}:\\mathrm{True}$} (q_2);\n    \\end{tikzpicture}\n    \\caption{State diagram of the ACADL ExecuteStage class. The $fu$ represents any of the contained FunctionalUnits, and $ps$ represents any of the connected PipelineStages.}\n\\end{figure}\n\n\\end{document}",
  "compiled_successfully": true,
  "ground_truth": "\\documentclass[10pt,oneside,twocolumn,a4paper]{article}\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\\usepackage{amsmath}\n\\usepackage{tikz}\n\\usetikzlibrary{automata, positioning, arrows}\n\\tikzset{\n    ->, % makes the edges directed\n    >=stealth,\n    node distance=4em, % specifies the minimum distance between two nodes. Change if necessary.\n    every state/.style={thick, fill=gray!10, minimum size=4em}, % sets the properties for each ’state’ node\n    initial text=$ $, % sets the text that appears on the start arrow\n    fontscale/.style = {font=\\scriptsize}\n}\n\\usepackage{color}\n\\usepackage{xcolor}\n\n\\begin{document}\n\n\\begin{tikzpicture}[scale=0.9, every node/.style={scale=0.9}]\n    \\node[state, initial] at (0,6.5) (idle) {idle};\n    \\node[state] at (0,12.5) (buffer) {buffer};\n    \\node[state] at (0,0) (process) {process};\n    \\node[state] at (5.5,6.5) (stall) {stall};\n    \\draw   (idle) edge node[sloped, anchor=center, align=center] {\\texttt{:receive()} $\\wedge$ no \\texttt{fu} found\\\\/\\texttt{t:=latency,ready:=False}} (buffer)\n            (buffer) edge[bend right] node[sloped, align=center, above, rotate=180] {\\texttt{t==0} $\\wedge$ \\texttt{ps.ready()}\\\\\\texttt{/:forward(ps),ready:=True}} (idle)\n            (idle) edge node[sloped, anchor=center, align=center, rotate=180] {\\texttt{:receive()} $\\wedge$ \\texttt{fu} found\\\\/\\texttt{fu.process(),}\\texttt{ready:=False}} (process)\n            (process) edge[bend left] node[sloped, anchor=center, align=center,above] {\\texttt{fu.ready()}\\\\/\\texttt{ready:=True}} (idle)\n            (buffer) edge node[sloped, anchor=center, above, align=center] {\\texttt{t==0} $\\wedge$ \\texttt{!ps.ready()/}} (stall)\n            (stall) edge node[align=center, below] {\\texttt{ps.ready()}\\\\/\\texttt{:forward(ps),}\\\\\\texttt{ready:=True}} (idle)\n            (stall) edge[loop above] node {} (stall)\n            (buffer) edge[loop above] node {\\texttt{t!=0}/\\texttt{t:=t-1}} (buffer)\n            (process) edge[loop below] node {\\texttt{!fu.ready()}/} (process)\n    ;\n\\end{tikzpicture}\n\n\\end{document}",
  "attempts": 1
}