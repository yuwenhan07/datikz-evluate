{
  "prompt": "The Snyk Code Codesearch system. The components in the gray box comprise the system itself, with the inputs and outputs placed above and below respectively. Rectangles represent computations, while ellipses represent data. The ``Codesearch STL'' (STandard Library) node is on the border of the system, acting as an API to the underlying StarLang language.",
  "response": "Certainly! Below is a TikZ LaTeX code that represents the Snyk Code Codesearch system as described:\n\n```latex\n\\documentclass[tikz,border=10pt]{standalone}\n\\usetikzlibrary{shapes.geometric, arrows.meta}\n\n\\tikzset{\n    block/.style = {rectangle, draw, fill=blue!20, \n        text width=5em, text centered, rounded corners, minimum height=4em},\n    ellipsis/.style = {ellipse, draw, fill=red!20, \n        text width=3em, text centered, minimum height=3em},\n    line/.style = {draw, thick, ->, >=stealth}\n}\n\n\\begin{document}\n\\begin{tikzpicture}[node distance=2cm]\n    % Inputs\n    \\node [block] (input1) {Input 1};\n    \\node [block, below=of input1] (input2) {Input 2};\n\n    % System Components\n    \\node [block, left=of input1, xshift=-3cm] (codesearch_stl) {Codesearch STL};\n    \\node [block, right=of input2, xshift=3cm] (starlang_api) {StarLang API};\n    \\node [block, below=of codesearch_stl, yshift=-2cm] (computation1) {Computation 1};\n    \\node [block, below=of computation1] (computation2) {Computation 2};\n    \\node [ellipsis, below=of computation2, yshift=-2cm] (output_data) {Output Data};\n\n    % Outputs\n    \\node [block, above=of output_data, yshift=2cm] (output1) {Output 1};\n    \\node [block, above=of output1, yshift=2cm] (output2) {Output 2};\n\n    % Arrows\n    \\draw [line] (input1) -- (codesearch_stl);\n    \\draw [line] (input2) -- (codesearch_stl);\n    \\draw [line] (codesearch_stl) -- (computation1);\n    \\draw [line] (computation1) -- (computation2);\n    \\draw [line] (computation2) -- (output_data);\n    \\draw [line] (output_data) |- (output1);\n",
  "latex_code": "Certainly! Below is a TikZ LaTeX code that represents the Snyk Code Codesearch system as described:\n\n```latex\n\\documentclass[tikz,border=10pt]{standalone}\n\\usetikzlibrary{shapes.geometric, arrows.meta}\n\n\\tikzset{\n    block/.style = {rectangle, draw, fill=blue!20, \n        text width=5em, text centered, rounded corners, minimum height=4em},\n    ellipsis/.style = {ellipse, draw, fill=red!20, \n        text width=3em, text centered, minimum height=3em},\n    line/.style = {draw, thick, ->, >=stealth}\n}\n\n\\begin{document}\n\\begin{tikzpicture}[node distance=2cm]\n    % Inputs\n    \\node [block] (input1) {Input 1};\n    \\node [block, below=of input1] (input2) {Input 2};\n\n    % System Components\n    \\node [block, left=of input1, xshift=-3cm] (codesearch_stl) {Codesearch STL};\n    \\node [block, right=of input2, xshift=3cm] (starlang_api) {StarLang API};\n    \\node [block, below=of codesearch_stl, yshift=-2cm] (computation1) {Computation 1};\n    \\node [block, below=of computation1] (computation2) {Computation 2};\n    \\node [ellipsis, below=of computation2, yshift=-2cm] (output_data) {Output Data};\n\n    % Outputs\n    \\node [block, above=of output_data, yshift=2cm] (output1) {Output 1};\n    \\node [block, above=of output1, yshift=2cm] (output2) {Output 2};\n\n    % Arrows\n    \\draw [line] (input1) -- (codesearch_stl);\n    \\draw [line] (input2) -- (codesearch_stl);\n    \\draw [line] (codesearch_stl) -- (computation1);\n    \\draw [line] (computation1) -- (computation2);\n    \\draw [line] (computation2) -- (output_data);\n    \\draw [line] (output_data) |- (output1);\n",
  "ground_truth": "\\documentclass[a4paper]{article}\n\\usepackage[T1]{fontenc}\n\\usepackage{amsmath}\n\\usepackage{amssymb}\n\\usepackage{xcolor}\n\\usepackage{tikz}\n\\usetikzlibrary{arrows,shapes.geometric,positioning,shadows,calc,backgrounds}\n\n\\begin{document}\n\n\\begin{tikzpicture}[\n  every node/.style={inner sep=1.5pt},\n  data/.style={ellipse, draw=black, fill=white, thick, minimum height=4mm, minimum height=6mm, align=center},\n  process/.style={rectangle, draw=black, fill=white, thick, minimum width=5mm, minimum height=6mm, align=center, inner sep=5pt},\n  shadows/.style={double copy shadow, shadow xshift=2pt, shadow yshift=-2pt},\n]\n  %nodes\n  \\node[data] (code) {User code};\n  \\node[data] (query) [right=of code,xshift=1.7cm] {User Codesearch\\\\query $\\star$};\n  \\node[process, shadows] (parsers) [below=of code,yshift=-0.5cm] {Parsers};\n  \\node[data, shadows] (asts) [below=of parsers] {ASTs};\n  \\node[process] (engine) [below=of asts] {Analysis\\\\engine};\n  \\node[data] (graph) [below=of engine,yshift=0.1mm] {Analysis\\\\graph};\n  \\node[process] (translator) [below=of query,yshift=-0.3cm] {Translator};\n  \\node[data] (stdlib) [right=of translator,yshift=10mm] {Codesearch\\\\STL $\\star$};\n  \\node[data] (partial-query) [below=of translator,yshift=0.3cm] {Partial\\\\query};\n  \\node[process] (autocomplete) [below=of partial-query,yshift=0.3cm] {Autocomplete\\\\engine $\\star$};\n  \\node[process] (solver) [below=of autocomplete] {StarLang\\\\solver};\n  \\node[data] (starlang-query) [right=of autocomplete,xshift=-5mm] {StarLang\\\\query $\\star$};\n  \\node[data] (suggestions) [left=of partial-query] {Suggestions};\n  \\node[data] (result) [below=of solver] {Query result};\n\n  %edges\n  \\draw[->] (code) -- (parsers);\n  \\draw[->] (parsers) -- (asts);\n  \\draw[->] (asts) -- (engine);\n  \\draw[->] (engine) -- (graph);\n  \\draw[->] (graph) -- (solver);\n  \\draw[->] (graph) -| +(2,1.97) -- (autocomplete.185);\n  \\draw[->] (partial-query) -- (autocomplete);\n  \\draw[->] (translator) -- (partial-query);\n  \\draw[->] (query) -- (translator);\n  \\draw[<-,dashed] (stdlib) |- (query);\n  \\draw[->] (translator) -| (starlang-query);\n  \\draw[->] (starlang-query) |- (solver);\n  \\draw[->] (stdlib) |- +(0.9,-3.5) -- +(0.9,-6.55) -- (solver);\n  \\draw[->] (stdlib) |- +(0.9,-3.5) -- +(-2.85,-3.5) -- (autocomplete.50);\n  \\draw[->] (solver) -- (result);\n  \\draw[->] (solver.115) -| (autocomplete.255);\n  \\draw[->] (autocomplete.285) -- (solver.75);\n  \\draw[->] (autocomplete.175) -| (suggestions);\n  \\draw[->] (suggestions) |- (query);\n\n  \\begin{scope}[on background layer]\n    \\draw[very thick,fill=black!10] ($(parsers.north west)+(-0.7,0.6)$) rectangle ($(solver.south east)+(3.7,-0.6)$);\n  \\end{scope}\n\\end{tikzpicture}\n\n\\end{document}"
}